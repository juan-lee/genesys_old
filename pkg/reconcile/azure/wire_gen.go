// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package azure

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/adal"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/juan-lee/genesys/pkg/reconcile/cluster"
	"github.com/juan-lee/genesys/pkg/reconcile/network"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// Injectors from inject_azure.go:

func InjectCluster(c Configuration) (reconcile.Reconciler, error) {
	authorizer, err := provideAuthorizer(c)
	if err != nil {
		return nil, err
	}
	vnetProvider, err := ProvideNetwork(c, authorizer)
	if err != nil {
		return nil, err
	}
	reconciler, err := network.ProvideReconciler(vnetProvider)
	if err != nil {
		return nil, err
	}
	reconcileReconciler, err := cluster.ProvideReconciler(reconciler)
	if err != nil {
		return nil, err
	}
	return reconcileReconciler, nil
}

// inject_azure.go:

func provideAuthorizer(c Configuration) (autorest.Authorizer, error) {
	env, err := azure.EnvironmentFromName(c.Cloud)
	if err != nil {
		return nil, err
	}
	oauthConfig, err := adal.NewOAuthConfig(
		env.ActiveDirectoryEndpoint, c.TenantID)
	if err != nil {
		return nil, err
	}

	token, err := adal.NewServicePrincipalToken(*oauthConfig, c.ClientID, c.ClientSecret, env.ResourceManagerEndpoint)
	if err != nil {
		return nil, err
	}
	return autorest.NewBearerAuthorizer(token), nil
}
