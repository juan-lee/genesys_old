// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package azure

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/adal"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/go-logr/logr"
	"github.com/google/wire"
	"github.com/juan-lee/genesys/pkg/actuator/cluster"
	"github.com/juan-lee/genesys/pkg/actuator/network"
	"github.com/juan-lee/genesys/pkg/actuator/provider"
	"github.com/juan-lee/genesys/pkg/apis/kubernetes/v1alpha1"
	"os"
)

// Injectors from inject_azure.go:

func InjectCluster(log logr.Logger, c v1alpha1.Cloud) (*cluster.SelfManaged, error) {
	configuration, err := provideConfiguration()
	if err != nil {
		return nil, err
	}
	authorizer, err := provideAuthorizer(log, configuration)
	if err != nil {
		return nil, err
	}
	azureNames := providePrefixedNames(c)
	virtualNetworkFactory, err := ProvideVirtualNetworkFactory(log, authorizer, c, azureNames)
	if err != nil {
		return nil, err
	}
	flat, err := network.ProvideFlatNetwork(log, virtualNetworkFactory)
	if err != nil {
		return nil, err
	}
	selfManaged, err := cluster.ProvideSelfManaged(log, flat)
	if err != nil {
		return nil, err
	}
	return selfManaged, nil
}

// inject_azure.go:

var netSet = wire.NewSet(
	ProvideControlPlaneEndpoint, wire.Bind(new(provider.ControlPlaneEndpoint), new(ControlPlaneEndpoint)), ProvideVirtualNetworkFactory, wire.Bind(new(provider.VirtualNetworkFactory), new(VirtualNetworkFactory)),
)

func provideConfiguration() (Configuration, error) {
	return Configuration{
		Cloud:        "AzurePublicCloud",
		ClientID:     os.Getenv("AZURE_CLIENT_ID"),
		ClientSecret: os.Getenv("AZURE_CLIENT_SECRET"),
		TenantID:     os.Getenv("AZURE_TENANT_ID"),
	}, nil
}

func provideAuthorizer(log logr.Logger, c Configuration) (autorest.Authorizer, error) {
	env, err := azure.EnvironmentFromName(c.Cloud)
	if err != nil {
		return nil, err
	}
	oauthConfig, err := adal.NewOAuthConfig(
		env.ActiveDirectoryEndpoint, c.TenantID)
	if err != nil {
		return nil, err
	}

	token, err := adal.NewServicePrincipalToken(*oauthConfig, c.ClientID, c.ClientSecret, env.ResourceManagerEndpoint)
	if err != nil {
		return nil, err
	}
	return autorest.NewBearerAuthorizer(token), nil
}
