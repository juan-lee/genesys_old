// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package bootstrap

import (
	"github.com/go-logr/logr"
	"github.com/juan-lee/genesys/pkg/actuator/controlplane"
	"github.com/juan-lee/genesys/pkg/actuator/network"
	"github.com/juan-lee/genesys/pkg/actuator/provider"
	"github.com/juan-lee/genesys/pkg/apis/kubernetes/v1alpha1"
	"github.com/juan-lee/genesys/pkg/providers/azure"
	"sigs.k8s.io/controller-runtime/pkg/runtime/log"
)

// Injectors from inject_bootstrap.go:

func injectBootstrap(cloud *v1alpha1.Cloud) (*Bootstrap, error) {
	logger, err := provideLogger()
	if err != nil {
		return nil, err
	}
	providerInterface, err := setupAzureProvider(logger, cloud)
	if err != nil {
		return nil, err
	}
	flat, err := network.ProvideFlat(logger, cloud, providerInterface)
	if err != nil {
		return nil, err
	}
	singleInstance, err := controlplane.ProvideSingleInstance(logger, cloud, providerInterface)
	if err != nil {
		return nil, err
	}
	bootstrap, err := provideBootstrap(logger, flat, singleInstance)
	if err != nil {
		return nil, err
	}
	return bootstrap, nil
}

// inject_bootstrap.go:

func provideLogger() (logr.Logger, error) {
	return log.Log.WithName("actuator.bootstrap"), nil
}

func setupAzureProvider(log2 logr.Logger, cloud *v1alpha1.Cloud) (provider.Interface, error) {
	return azure.NewProvider(cloud)
}

func provideBootstrap(log2 logr.Logger, net *network.Flat, cp *controlplane.SingleInstance) (*Bootstrap, error) {
	return &Bootstrap{log: log2, net: net, cp: cp}, nil
}
